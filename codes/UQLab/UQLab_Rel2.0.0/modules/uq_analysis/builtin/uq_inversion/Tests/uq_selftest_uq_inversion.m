function [pass] = uq_selftest_uq_inversion(level)
% UQ_SELFTEST_UQ_INVERSION performs functionality and consistency
%   tests for the Bayesian inversion module of UQLab. A number of tests are
%   executed and their results are summarized and printed on screen.
%
% See also: UQ_INVERSION

% start uqlab
uqlab('-nosplash');

% default level
if nargin < 1
    level = 'normal';
end

% tests to perform
TestNames = {...
    'uq_inversion_test_func_normpdf',...
    'uq_inversion_test_func_lognormpdf',...
    'uq_inversion_test_func_Visualize',...
    'uq_inversion_test_func_InitOnly',...
    'uq_inversion_test_func_noDiscrepancy',...
    'uq_inversion_test_func_CustomLikelihood',...
    'uq_inversion_test_func_SigmaKnownScalar',...
    'uq_inversion_test_func_SigmaKnownScalar_WithConstant',...
    'uq_inversion_test_func_SigmaKnownRow',...
    'uq_inversion_test_func_SigmaKnownMatrix',...
    'uq_inversion_test_func_SigmaUnknownScalar',...
    'uq_inversion_test_func_SigmaUnknownRow',...
    'uq_inversion_test_func_SigmaUnknownScalar_WithConstant',...
    'uq_inversion_test_func_MultiModels',...
    'uq_inversion_test_func_MultiModels_noDiscrepancy',...
    'uq_inversion_test_func_MultiModels_multiDiscrepancy',...
    'uq_inversion_test_func_DiscrepancyGroup',...
    'uq_inversion_test_func_PMap',...
    'uq_inversion_test_MCMC_MH_rwm',...
    'uq_inversion_test_MCMC_MH_custProp',...
    'uq_inversion_test_MCMC_AM_rwm',...
    'uq_inversion_test_MCMC_AM_custProp',...
    'uq_inversion_test_MCMC_AIES',...
    'uq_inversion_test_MCMC_HMC',...
    'uq_inversion_test_func_MH',...
    'uq_inversion_test_func_AM',...
    'uq_inversion_test_func_AIES',...
    'uq_inversion_test_func_HMC',...
    'uq_inversion_test_SLE',...
    'uq_inversion_test_SSLE',...
    'uq_inversion_test_func_independentCopulas',...
    'uq_inversion_test_postProc',...
    'uq_inversion_test_display',...
    'uq_inversion_test_print'};

% run the tests
Ntests = length(TestNames);
success = false(1, Ntests);
Times = zeros(1, Ntests);
for ii = 1:Ntests
    TestTimer = tic;
    testHandle = str2func(TestNames{ii});
    success(ii) = testHandle(level);
    Times(ii) = toc(TestTimer);
end

%% Print out the results table and info:
Result = {'ERROR','OK'};

% Character where the result of test is displayed
ResultChar = 60; 

MinusLine(1:ResultChar+7) = deal('-');
fprintf('\n%s\n',MinusLine);
fprintf('UQ_SELFTEST_UQ_INVERSION RESULTS');
fprintf('\n%s\n',MinusLine);
for ii = 1:length(success)
    points(1:max(2,ResultChar-size(TestNames{ii},2))) = deal('.');
    fprintf('%s %s %s @ %g sec.\n',TestNames{ii},points,Result{success(ii)+1},Times(ii));
    clear points
end
fprintf('%s\n',MinusLine);



% successful or not
if all(success)
    pass = 1;
    fprintf('\n');
    fprintf(['SUCCESS: uq_inversion module ' level ' test was successful.\n']);
else
    pass = 0;
    fprintf('\n');
    fprintf(['FAIL: uq_inversion module ' level ' test failed.\n']);
end
fprintf('Total time: %g',sum(Times));

end