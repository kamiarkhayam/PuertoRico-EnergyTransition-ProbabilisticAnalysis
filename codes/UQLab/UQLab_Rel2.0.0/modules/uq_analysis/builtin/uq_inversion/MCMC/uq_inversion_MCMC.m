function Results = uq_inversion_MCMC(Options)           
% UQ_INVERSION_MCMC is a wrapper for all MCMC samplers used in the
%    Bayesian inversion module.
%
%    See also: UQ_MH, UQ_AM, UQ_HMC, UQ_AIES

% extract MCMC options
Solv_Opt = Options.Solver;
MCMC_Opt = Solv_Opt.MCMC;

% switch between samplers
switch upper(MCMC_Opt.Sampler)
    case 'MH'
        % Metroplis Hastings Algorithm:
    if Options.Display > 0
        fprintf('\nStarting Metropolis Hastings Algorithm...\n');
    end

    % run MH algorithm
    [   Results.Sample, ...
        Results.Acceptance, ...
        Results.Time , ...
        Results.ForwardModel, ...
        Results.LogLikeliEval] = uq_MH(...
                                    MCMC_Opt.Steps, ...
                                    MCMC_Opt.Seed, ...
                                    MCMC_Opt.Proposal.Handle,...
                                    Solv_Opt.LogPrior, ...
                                    Solv_Opt.LogLikelihood, ...
                                    MCMC_Opt.Visualize, ...
                                    MCMC_Opt.StoreModel);

    if Options.Display > 0
        fprintf('\nFinished Metropolis Hastings Algorithm!\n');
    end

    case 'AM' 
        % Adaptive Metropolis (Haario et. al 2001)
    if Options.Display > 0
        fprintf('\nStarting Adaptive Metropolis...\n');
    end

    % run AM algorithm
    [   Results.Sample, ...
        Results.Acceptance, ...
        Results.Time , ...
        Results.ForwardModel, ...
        Results.LogLikeliEval] = uq_AM(...
                                    MCMC_Opt.Steps, ...
                                    MCMC_Opt.Seed, ...
                                    MCMC_Opt.T0, ...
                                    MCMC_Opt.Epsilon, ...
                                    MCMC_Opt.Proposal.Handle, ...
                                    Solv_Opt.LogPrior, ...
                                    Solv_Opt.LogLikelihood,  ...
                                    MCMC_Opt.Visualize, ...
                                    MCMC_Opt.StoreModel);

    if Options.Display > 0
        fprintf('\nFinished Adaptive Metropolis!\n');
    end

    case 'AIES' 
        % Affine invariant ensemble sampler (Goodman & Weare et. al 2010)
    if Options.Display > 0
        fprintf('\nStarting AIES...\n');
    end


    % run AIES algorithm
    [   Results.Sample, ...
        Results.Acceptance, ...
        Results.Time , ...
        Results.ForwardModel, ...
        Results.LogLikeliEval] = uq_AIES(...
                                    MCMC_Opt.Steps, ...
                                    MCMC_Opt.Seed, ...
                                    MCMC_Opt.a,...
                                    Solv_Opt.LogPrior, ...
                                    Solv_Opt.LogLikelihood, ...
                                    MCMC_Opt.Visualize, ...
                                    MCMC_Opt.StoreModel);

    if Options.Display > 0
        fprintf('\nFinished AIES!\n');
    end

    case 'HMC'   
        % hamiltonian monte carlo
    if Options.Display > 0
        fprintf('\nStarting Hamiltonian Monte Carlo...\n');
    end

    % extract prior marginals
    priorMarginals = Options.FullPrior.Marginals;

    % run HMC algorithm
    [   Results.Sample, ...
        Results.Acceptance, ...
        Results.Time, ...
        Results.ForwardModel, ...
        Results.LogLikeliEval] = uq_HMC(...
                                    MCMC_Opt.Steps, ...
                                    MCMC_Opt.LeapfrogSteps, ...
                                    MCMC_Opt.LeapfrogSize, ...
                                    MCMC_Opt.Mass, ...
                                    MCMC_Opt.Seed,...
                                    Solv_Opt.LogPrior, ...
                                    Solv_Opt.LogLikelihood, ...
                                    MCMC_Opt.Visualize, ...
                                    MCMC_Opt.StoreModel, ...
                                    priorMarginals);

    if Options.Display > 0
        fprintf('\nFinished Hamiltonian Monte Carlo!\n');
    end
end